plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '2.0.89'
    id 'idea'
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

repositories {
    mavenLocal()
    maven {
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        name = "Illusive Soulworks maven"
        url = "https://maven.theillusivec4.top/"
    }
    maven {
        url = "https://api.modrinth.com/maven"
    }
}

// Configure source sets for multi-source layout
sourceSets {
    api {
        java {
            srcDir 'src/api/java'
        }
        resources {
            srcDir 'src/api/resources'
        }
        // API source set needs access to the same compile classpath as main
        compileClasspath += configurations.compileClasspath
    }

    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
        }
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
    }
}

neoForge {
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    runs {
        client {
            client()
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
            sourceSet(sourceSets.api)
        }
    }
}

// Apply NeoForge configuration to API source set
configurations {
    // Make API source set use NeoForge configurations
    apiCompileClasspath.extendsFrom(compileClasspath)
    apiRuntimeClasspath.extendsFrom(runtimeClasspath)
}

// Include resources generated by data generators
sourceSets.main.resources { srcDir 'src/generated/resources' }

// Sets up a dependency configuration called 'localRuntime'
configurations {
    runtimeClasspath.extendsFrom localRuntime

    // Make API source set use NeoForge configurations
    apiCompileClasspath.extendsFrom(compileClasspath)
    apiRuntimeClasspath.extendsFrom(runtimeClasspath)

    // Configuration for API elements
    apiElements {
        canBeConsumed = true
        canBeResolved = false
    }
}

dependencies {
    // Main implementation gets full NeoForge (this will be inherited by API)
    implementation("net.neoforged:neoforge:${neo_version}")

    // JEI integration
    compileOnly("mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}")
    runtimeOnly("mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}")

    // Curios integration
    compileOnly "top.theillusivec4.curios:curios-neoforge:${curios_version}+${minecraft_version}:api"
    runtimeOnly "top.theillusivec4.curios:curios-neoforge:${curios_version}+${minecraft_version}"

    implementation "maven.modrinth:jade:${jade_version}+neoforge"
}

// Configure duplicate handling for resource processing
processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// Create unified JAR with both API and main source sets
jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from sourceSets.main.output
    from sourceSets.api.output

    manifest {
        attributes([
                'Specification-Title': project.mod_name,
                'Specification-Vendor': project.mod_authors,
                'Specification-Version': '1',
                'Implementation-Title': project.mod_name,
                'Implementation-Version': project.mod_version,
                'Implementation-Vendor': project.mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Create API-only JAR
task apiJar(type: Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from sourceSets.api.output
    archiveClassifier = 'api'

    manifest {
        attributes([
                'Specification-Title': project.mod_name + ' API',
                'Specification-Vendor': project.mod_authors,
                'Specification-Version': '1',
                'Implementation-Title': project.mod_name + ' API',
                'Implementation-Version': project.mod_version,
                'Implementation-Vendor': project.mod_authors
        ])
    }
}

// Create sources JAR
task sourcesJar(type: Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from sourceSets.main.allJava
    from sourceSets.api.allJava
    archiveClassifier = 'sources'
}

// Create API sources JAR
task apiSourcesJar(type: Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from sourceSets.api.allJava
    archiveClassifier = 'api-sources'
}

artifacts {
    archives apiJar
    archives sourcesJar
    archives apiSourcesJar
}

// Generate mod metadata with property replacement
var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}

sourceSets.main.resources.srcDir generateModMetadata
neoForge.ideSyncTask generateModMetadata

// Maven publishing configuration
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java

            // Also publish the API JAR
            artifact apiJar
            artifact apiSourcesJar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

// IDEA configuration
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}