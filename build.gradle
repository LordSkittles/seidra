plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

// Mojang ships Java 17 to end users starting in 1.18
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println("Java: ${System.getProperty('java.version')}, JVM: ${System.getProperty('java.vm.version')} (${System.getProperty('java.vendor')}), Arch: ${System.getProperty('os.arch')}")

minecraft {
    // Use official mappings for 1.19.2
    mappings channel: 'official', version: '1.19.2'

    // Enable IDE resource copying
    copyIdeResources = true

    runs {
        configureEach {
            workingDirectory project.file('run')

            // Logging configuration
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', mod_id

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            // Client-specific properties
        }

        server {
            args '--nogui'
        }

        gameTestServer {
            // GameTest server configuration
        }

        data {
            workingDirectory project.file('run-data')

            // Data generation arguments
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

// Include resources generated by data generators
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        url = "https://maven.theillusivec4.top/"
    }
}

dependencies {
    // Minecraft Forge
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // JEI (Just Enough Items) integration - correct format for 1.19.2
    // compile against the JEI API but do not include it at runtime
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")

    // Jade integration - using the correct Jade mod instead of WTHIT
    /*compileOnly fg.deobf("snownee:jade-api:${jade_version}")
    runtimeOnly fg.deobf("snownee:jade:${jade_version}")*/
}

// Example of how to get properties into the manifest for reading by the runtime
jar {
    manifest {
        attributes([
                "Specification-Title": mod_id,
                "Specification-Vendor": mod_authors,
                "Specification-Version": "1",
                "Implementation-Title": project.name,
                "Implementation-Version": project.jar.archiveVersion,
                "Implementation-Vendor": mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Process resources on build
tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

// Automatically reobfuscate the jar after building
jar.finalizedBy('reobfJar')

// Maven publishing configuration
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

// Configure Java compilation
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use UTF-8 charset for Java compilation
}